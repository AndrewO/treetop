grammar Metagrammar  
	rule terminal_symbol
		terminal_symbol_prefix trailing_block {
			def value(grammar = nil)
      	trailing_block.value(terminal_symbol.value)
      end
      
      def terminal_symbol
        elements[0]
      end
      
      def trailing_block
        elements[1]
    	end
		}
	end

	rule terminal_symbol_prefix
		single_quoted_string / double_quoted_string / character_class / anything_symbol
	end

	rule double_quoted_string
		('"' (!'"' ('\"' / .))* '"') {
			def value
				TerminalSymbol.new(elements[1].text_value)
			end
		}
	end

	rule single_quoted_string
		("'" (!"'" ("\'" / .))* "'") {
			def value
				TerminalSymbol.new(elements[1].text_value)
			end
		}
	end

  rule trailing_block
    space block {
      def value(parsing_expression)
        parsing_expression.node_class_eval(block.value)
        return parsing_expression
      end

      def block
        elements[1]
      end
    }
    /
    '' {
      def value(parsing_expression)
        parsing_expression
      end
    }
  end
  
  rule block
    ('{' (block / ![{}] .)* '}') {
      def value
        elements[1].text_value
      end
    }
  end

  rule character_class
    ('[' (!']' ('\]'/.))+ ']') {      
      def value(grammar = nil)
        CharacterClass.new(characters)
      end

      def characters
        elements[1].text_value
      end    
    }
  end
  
  rule keyword
    'rule' / 'end'
  end

  rule anything_symbol
    '.' {
      def value(grammar = nil)
        AnythingSymbol.new
      end
    }
  end
  
  rule space
    [ \t\n\r]+
  end
end