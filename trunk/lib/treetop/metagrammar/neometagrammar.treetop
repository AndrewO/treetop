grammar Metagrammar
  rule expression
    choice / sequence / primary
  end

  rule instantiator
    sequence / instantiator_primary
  end
  
  rule propagator
    choice / propagator_primary
  end

  rule choice
    alternative (space? '/' space? alternative)+
  end

  rule sequence
    primary (space primary)+ trailing_block
  end
  
  rule alternative
    sequence / primary
  end

  rule primary
    instantiator_primary trailing_block
    /
    propagator_primary
  end

  rule instantiator_primary
    atomic repetition_suffix / atomic_instantiator
  end
  
  rule propagator_primary
    prefix (instantiator_primary / atomic)
    /
    (instantiator_primary / atomic) '?'
    /
    atomic_propagator
  end
  
  rule repetition_suffix
    '+' / '*'
  end
  
  rule prefix
    '&' / '!'
  end

  rule atomic
    atomic_instantiator / atomic_propagator
  end

  rule atomic_instantiator
    terminal / parenthesized_instantiator
  end

  rule atomic_propagator
    nonterminal / parenthesized_propagator
  end
  
  rule parenthesized_instantiator
    '(' space? instantiator space? ')'
  end
  
  rule parenthesized_propagator
    '(' space? propagator space? ')'
  end

  rule nonterminal
    (!keyword (alpha_char alphanumeric_char*)) {
      def name
        elements[1].text_value
      end
      
      def to_ruby(grammar_node)
        "#{grammar_node.name}.nonterminal_symbol(:#{name})"
      end
    }
  end

  rule terminal
    single_quoted_string / double_quoted_string / character_class / anything_symbol
  end

  rule double_quoted_string
    ('"' (!'"' ('\"' / .))* '"') {
      def to_ruby
        "TerminalSymbol.new(\"#{elements[1].text_value}\")"
      end
    }
  end

  rule single_quoted_string
    ("'" (!"'" ("\\'" / .))* "'") {
      def to_ruby
        "TerminalSymbol.new('#{elements[1].text_value}')"
      end
    }
  end

  rule character_class
    ('[' (!']' ('\]'/.))+ ']') {
      def to_ruby
        "CharacterClass.new('#{characters}')"
      end
      
      def characters
        elements[1].text_value
      end
    }
  end

  rule anything_symbol
    '.' {
      def to_ruby
        'AnythingSymbol.new'
      end
    }
  end
  
  rule trailing_block
    space block {
      def to_ruby(preceding_expression_ruby_source)
        "#{preceding_expression_ruby_source} #{block.to_ruby}"
      end

      def block
        elements[1]
      end
    }
    /
    '' {
      def to_ruby(preceding_expression_ruby_source)
        preceding_expression_ruby_source
      end
    }
  end

  rule block
    ('{' (block / ![{}] .)* '}') {
      def to_ruby
        text_value
      end    
    }
  end

  rule keyword
    ('rule' / 'end') !(!space .)
  end

  rule alpha_char
    [A-Za-z_]
  end

  rule alphanumeric_char
    alpha_char / [0-9]
  end
  
  rule space
    [ \t\n\r]+
  end
end