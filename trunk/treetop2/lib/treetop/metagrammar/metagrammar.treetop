module Treetop2
  grammar Metagrammar
    rule treetop_file
      (grammar / arbitrary_character)*
    end

    rule arbitrary_character
      .
    end

    rule grammar
      'grammar' space grammar_name parsing_rule_sequence space? 'end'
    end

    rule grammar_name
      ([A-Z] alphanumeric_char*) space
    end

    rule parsing_rule_sequence
      head_rule:parsing_rule tail_rules:(space parsing_rule)*
      /
      ''
    end

    rule parsing_rule
      'rule' space nonterminal space parsing_expression space 'end'
    end

    rule parsing_expression
      choice / sequence / primary
    end

    rule instantiator
      sequence / instantiator_primary
    end

    rule propagator
      choice / propagator_primary
    end

    rule choice
      head_alternative:alternative (space? '/' space? alternative)+
    end

    rule sequence
      head_element:blockless_primary (space blockless_primary)+ node_class_expression trailing_block
    end

    rule alternative
      sequence / primary
    end

    rule primary
      label labelless_primary
      /
      labelless_primary
    end

    rule label
      (alpha_char alphanumeric_char*) ':' {
        def to_ruby
          ".labeled_as(:#{elements[0].text_value})"
        end
      }
    end
    
    rule labelless_primary
      instantiator_primary node_class_expression trailing_block
      /
      propagator_primary
    end

    rule blockless_primary
      label (labelless_blockless_primary)
      /
      labelless_blockless_primary
    end
    
    rule labelless_blockless_primary
      instantiator_primary / propagator_primary
    end

    rule instantiator_primary
      atomic repetition_suffix
      /
      atomic_instantiator
    end

    rule propagator_primary
      prefix (instantiator_primary / atomic)
      /
      (instantiator_primary / atomic) '?'
      /
      atomic_propagator
    end

    rule repetition_suffix
      '+' <MetagrammarNode::Plus> / '*'
    end

    rule prefix
      '&' <MetagrammarNode::And> / '!'
    end

    rule atomic
      atomic_instantiator / atomic_propagator
    end

    rule atomic_instantiator
      terminal / parenthesized_instantiator
    end

    rule atomic_propagator
      nonterminal / parenthesized_propagator
    end
  
    rule parenthesized_instantiator
      '(' space? instantiator space? ')'
    end
  
    rule parenthesized_propagator
      '(' space? propagator space? ')'
    end

    rule nonterminal
      !keyword_inside_grammar (alpha_char alphanumeric_char*)
    end

    rule terminal
      single_quoted_string / double_quoted_string / character_class / anything_symbol
    end

    rule double_quoted_string
      '"' (!'"' ("\\\\" / '\"' / .))* '"'
    end

    rule single_quoted_string
      "'" (!"'" ("\\\\" / "\\'" / .))* "'"
    end

    rule character_class
      '[' (!']' ('\]'/.))+ ']'
    end

    rule anything_symbol
      '.'
    end
    
    rule node_class_expression
      space '<' (!'>' .)+ '>'
      /
      ''
    end
  
    rule trailing_block
      space block
      /
      ''
    end

    rule block
      '{' (block / ![{}] .)* '}'
    end

    rule keyword_inside_grammar
      ('rule' / 'end') !non_space_char
    end
  
    rule non_space_char
      !space .
    end

    rule alpha_char
      [A-Za-z_]
    end

    rule alphanumeric_char
      alpha_char / [0-9]
    end
  
    rule space
      [ \t\n\r]+
    end
  end
end