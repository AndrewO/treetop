grammar Arithmetic
  module BinaryOperation
	  def left_arg
      elements[0]
    end

    def right_arg
      elements[2]
    end

    def value
      operator.call(left_arg.value, right_arg.value)
		end
  end
  
  rule additive
		multitive "+" additive
		{
		  include BinaryOperation
 		  def operator
         lambda { |x, y| x + y  }
			end
		}
		/
		multitive
	end
   
  rule multitive
		primary "*" multitive
		{
			include BinaryOperation
			
			def operator
				lambda { |x, y| x * y }
			end
		}
		/
		primary
	end
	
  rule primary
		"(" additive ")"
		{
			def subexpression
        elements[1]
      end

      def value
        subexpression.value
      end
		}
		/
		decimal
	end

  rule decimal
		nonzero_digit digit*
		{
			def value
			   text_value.to_i 
			end
		}
		/
		"0"
		{
			def value
				0
			end
		}
	end

  rule nonzero_digit
		1 / 2 / 3 / 4 / 5 / 6 / 7 / 8 / 9
	end
	
  rule digit
		0 / 1 / 2 / 3 / 4 / 5 / 6 / 7 / 8 / 9
	end
end